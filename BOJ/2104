#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
vector<long long> tree;
vector< pair<int, int> > tree2;
int arr[100001], n;
long long maxi = -1;

void init(int node, int start, int end){
	if(start == end){
		tree[node] = arr[end];
		return;
	}
	init(node*2, start, (start+end) / 2);
	init(node*2+1, (start+end)/2 +1, end);
	tree[node] = tree[node*2] + tree[node*2+1];
}

void init2(int node, int start, int end){
	if(start == end){
		tree2[node].first = arr[end];
		tree2[node].second = end;
		return;
	}
	init2(node*2, start, (start+end) / 2);
	init2(node*2+1, (start+end)/2 +1, end);
	if(tree2[node*2] <= tree2[node*2+1]){
		tree2[node].first = tree2[node*2].first;
		tree2[node].second = tree2[node*2].second;
	} else{
		tree2[node].first = tree2[node*2+1].first;
		tree2[node].second = tree2[node*2+1].second;
	}

//	cout << start << " " << end << " " << tree2[node].first << " " << tree2[node].second << '\n';
}

long long query(int node, int start, int end, int left, int right){
	if(start > right || end < left) return 0;
	if(left <= start && end <= right) return tree[node];
	return query(node*2,start,(start+end)/2,left,right) + query(node*2+1,(start+end)/2+1,end,left,right);
}

int query2(int node, int start, int end, int left, int right){
	if(start > right || end < left) {

		return -1;
	}
	if(left <= start && end <= right) {
	//	cout << start << " " << end << " " << tree2[node].first << " " << tree2[node].second << " " << left << " " << right << '\n';
		return tree2[node].second;
	}
	
	int a = query2(node*2,start,(start+end)/2,left,right);
	int b = query2(node*2+1,(start+end)/2+1,end,left,right);
	if(a == -1) return b;
	else if(b == -1) return a;
	else{
		  if (arr[a] <= arr[b]) {
            return a;
        } else {
            return b;
        }
	}
}

long long ans(int left, int right){
	if(left > right) return -1;

	int mid = query2(1,1,n,left,right);
	if(mid==-1) return 1;
	
	ans(left,mid-1);
	ans(mid+1,right);
	long long imsi1 = query(1,1,n,left,right)*arr[query2(1,1,n,left,right)];
		maxi = max(imsi1, maxi);
	long long imsi2 = query(1,1,n,left,right)*arr[query2(1,1,n,left,right)];
//	cout << "asd = " << left << " " << right << " " << mid << " " << imsi1 << " " << imsi2 << '\n';

	maxi = max(imsi1, maxi);
	return maxi = max(imsi2, maxi);
}

int main() {
	cin >> n;
	int h = ceil(log2(n));
	int tree_size = 1 << (h+1);
	tree.resize(tree_size);
	tree2.resize(tree_size);
	for(int i=1;i<=n;i++) scanf("%d", &arr[i]);
	init(1,1,n);
	init2(1,1,n);
	cout << max(ans(1,n), tree[1] * tree2[1].first );
}

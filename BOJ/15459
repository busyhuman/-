#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
int n, flavor[100002], spicy[100002], ans = inf;
long long m;
vector<int> tree;

void init(int node, int start, int end){
	if( start == end){
		tree[node] = spicy[end];
		return;
	}
	init(node*2, start, (start+end)/2);
	init(node*2+1, (start+end)/2 + 1 , end);
	tree[node] = max(tree[node*2], tree[node*2+1] );
}

int query(int node, int start, int end, int left, int right){
	if( start > right || end < left) return 0;
	if( left <= start && end <= right) return tree[node];
	return max( query(node*2, start, (start+end)/2, left, right), query(node*2+1, (start+end)/2+1, end, left, right) );
}

int main() {
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n >> m;
	for(int i=1;i<=n;i++)
		cin >> flavor[i] >> spicy[i];
	tree.resize(400004);
	init(1, 1, n);
	int l = 1, r = 0;
	long long sum =0;
	while(l <= n && r <= n){
		if( sum < m ){
			sum += flavor[++r];
		}
		else{
			ans = min( ans, query(1, 1, n, l, r) );
			sum -= flavor[l++];
		}
	}
	cout << ans;
}

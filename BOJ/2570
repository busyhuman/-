#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
int n,m, row[101][101], col[101][101], chess[10001], ob[101][101];
vector<int> arr[10001];
bool visit[10001];

int dfs(int now){
	if( visit[now] ) return 0;
	visit[now] = true;
	int len = arr[now].size();
//	cout << now << '\n';
	for(int i=0;i<len;i++){
		int su = arr[now][i];
		
		if( chess[su] == -1 || ( !visit[ chess[su] ] && dfs( chess[su] ) ) ){
			chess[su] = now;
			return 1;
		}
	}
	return 0;
}

int main() {
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
    cin >> n;
	cin >> m;
	for(int i=0;i<m;i++){
		int y, x;
		cin >> y >> x;
		ob[y-1][x-1] = true;
	}
	
	int cnt = 1;
	for(int i=0;i<n;i++){
		bool check = false;
		for(int j=0;j<=i;j++){
			if( !ob[i-j][j] ){
				row[i-j][j] = cnt;
				check = true;
			}
			else{
				if(check){
					cnt++;
					check = false;
				}
			}
			
		}
		if(check) cnt++;
	}
	for(int i=n-1;i>=1;i--){
		bool check = false;
		for(int j=0;j<=n-i;j++){
			if( !ob[i+j][n-j-1] ){
				row[i+j][n-j-1] = cnt;
				check = true;
			}
			else{
				if(check){
					cnt++;
					check = false;
				}
			}
			
		}
		if(check) cnt++;
	}
	cnt = 1;
	
	// 구분
	
	for(int i=n-1;i>0;i--){
		bool check = false;
		for(int j=0;j<=n-i;j++){
			if( !ob[i+j][j] ){
				col[i+j][j] = cnt;
				check = true;
			}
			else{
				if(check){
					cnt++;
					check = false;
				}
			}
			
		}
		if(check) cnt++;
	}
	
	for(int i=n-1;i>=0;i--){
		bool check = false;
		for(int j=0;j<=n-i;j++){
			if( !ob[j][i+j] ){
				col[j][i+j] = cnt;
				check = true;
			}
			else{
				if(check){
					cnt++;
					check = false;
				}
			}
			
		}
		if(check) cnt++;
	}
	int R = cnt;
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			if(!ob[i][j])
			arr[ col[i][j] ].push_back( row[i][j] );	
		}
	}
	memset( chess, -1, sizeof(chess) );
	int ans = 0;
	for(int i=1;i<R;i++){
		memset( visit, false, sizeof(visit) );
		ans += dfs(i);
	}
	cout << ans;
}

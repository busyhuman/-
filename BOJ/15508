#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <list>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 100000000
int parent[21], n, m, k, cnt[21],len;
vector<int> v;
int find(int u) {
	if (u == parent[u]) return u;
	return parent[u] = find(parent[u]);
}

void uni(int x, int y) {
	int a = find(x);
	int b = find(y);
	parent[a] = b;
}

bool dfs(int now, int val) {
	if (val == k) return true;
	if (now == len) return false;
	return dfs(now + 1, val) || dfs(now + 1, val + v[now]);
}

int main() { 
	int imsi1, imsi2;
	cin >> n >> m >> k;
	for (int i = 1; i <= n; i++)
		parent[i] = i;
	for (int i = 0; i < m; i++) {
		cin >> imsi1 >> imsi2;
		uni(imsi1, imsi2);
	}
	for (int i = 1; i <= n; i++)
		cnt[find(i)]++;
	for (int i = 1; i <= n; i++)
		if (cnt[i]) v.push_back(cnt[i]);
	len = v.size();
	if (dfs(0, 0)) cout << "SAFE";
	else cout << "DOOMED";
}

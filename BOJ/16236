#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
const int shark = 9;
long long ans = 0;
int n, arr[21][21], fishDist[21][21];
int sharkSize = 2, eatCnt = 0;
int cfy, cfx, sharky, sharkx;
int dy[4] = {-1,0,1,0}, dx[4] = {0,1,0,-1};
bool visit[21][21] = {false};

// 상어 위치 찾기
void findShark(){
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			if(arr[i][j] == shark){
				sharky = i;
				sharkx = j;
				return;
			}
		}
	}
}

void closestFish(){
	queue<int> y,x,l;
	y.push(sharky);
	x.push(sharkx);
	l.push(0);
	memset(visit, false, sizeof(visit) );
	memset(fishDist, -1, sizeof(fishDist) );
	visit[sharky][sharkx] = true;
	
	while(!y.empty()){
		int yf = y.front(), xf = x.front(), lf =l.front();
		y.pop(), x.pop(), l.pop();
		for(int i=0;i<4;i++){
			int imsiy = yf + dy[i], imsix = xf + dx[i];
			
			if(imsiy < 0 || imsiy >= n || imsix < 0 || imsix >= n) continue;	// 배열의 범위를 초과함
			if(visit[imsiy][imsix]) continue;			// 이미 방문했음
			if(arr[imsiy][imsix] > sharkSize) continue;	// 해당 자리의 물고기가 상어보다 큼
			
			visit[imsiy][imsix] = true;
			
			// 방문한 자리에 자기보다 작은 물고기가 있으면 거리 삽입
			if(arr[imsiy][imsix] && arr[imsiy][imsix] != sharkSize) fishDist[imsiy][imsix] = lf+1;
			
			y.push(imsiy);
			x.push(imsix);
			l.push(lf+1);
		}
		
	}
}

void chooseFish(){
	int mini = inf;
	
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			if(fishDist[i][j] == -1) continue;
			mini = min(mini, fishDist[i][j]);
		}
	}
	if(mini == inf) return;		// 고기가 없음
	
	// 가장 위에있으면서 왼쪽에 있는 물고기
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			if( fishDist[i][j] == mini){
				cfy = i;
				cfx = j;
				return;
			}
		}
	}
}

// 물고기 먹고 상어 이동시킴
void eatFish(){
	ans += fishDist[cfy][cfx];	// 결과 추가
	
	arr[sharky][sharkx] = 0;
	arr[cfy][cfx] = shark;
	sharky = cfy;
	sharkx = cfx;
	eatCnt++;
	if(eatCnt == sharkSize){
		sharkSize++;
		eatCnt=0;
	}
}

int main() {
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
    cin >> n;
	for(int i=0;i<n;i++)
		for(int j=0;j<n;j++)
			cin >> arr[i][j];
	
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			cfy = -1, cfx = -1;
			findShark();
			closestFish();
			chooseFish();
			if(cfy == -1 && cfx == -1) goto End;	// 물고기가 없으면 이중 for문 탈출
			eatFish();
		}
	}
	End:
	cout << ans;
}

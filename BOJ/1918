#include <iostream>
#include <string>
#include <stack>
using namespace std;
int main(){
	string s;	// 입력 받을 문자열
	stack<char> st;	// 스택
	int len;	// 문자열의 길이
	char* first = "*/";		// 우선순위
	char* second = "+-";	// 우선순위2

	cin >> s;			// 문자열을 입력받는다.
	len = s.size();		// 문자열의 사이즈를 잰다.

	for (int i = 0; i < len; i++) {	// 문자열의 길이만큼 반복한다.
		// 피연산자라면 출력한다.
		if (s[i] >= 'A' && s[i] <= 'Z')
			cout << s[i];					

		// '('이면 스택에 넣는다.
		else if (s[i] == '(') 				
			st.push(s[i]);

		// ')'이면 '('을 만날때까지 pop해준다.
		else if (s[i] == ')') {							
			while (!st.empty() && st.top() != '(') {	
				cout << st.top();
				st.pop();
			}
			// 끝에 남는 '('도 pop 해준다.
			st.pop();								
		}

		// +-*/ 인 경우
		else {
			// 스택의 top이 '*' 이거나 '/'면
			if (s[i] == first[0] || s[i] == first[1]) {	
				// '(' 이거나 '+' 이거나 '-'가 아닐때 까지 계속 pop해준다.
				while (!st.empty() && st.top() != '(' && st.top() != second[0] && st.top() != second[1]) {
					cout << st.top();
					st.pop();
				}
				// 현재 문자를 스택에 넣어준다.
				st.push(s[i]);
			}

			// 스택의 top이 '+' 이거나 '-' 이면
			else if (s[i] == second[0] || s[i] == second[1]) {	
				// '('를 만날때 까지 빼준다.
				while (!st.empty() && st.top() != '(') {
					if (st.top() != ')')	// 단 ')'는 출력하지 않는다.
						cout << st.top();
					st.pop();
				}
				// 현재 문자를 스택에 넣어준다.
				st.push(s[i]);
			}
		}
	}

	// 연산이 끝난 후 스택의 모든 원소를 출력한다.
	while (!st.empty()) {
		if (st.top() != '(' && st.top() != ')')
			cout << st.top();
		st.pop();
	}

	return 0;
}

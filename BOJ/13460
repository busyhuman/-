#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <list>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
int n, m;
int dy[4] = {-1,0,1,0}, dx[4] = {0,1,0,-1};
int check[11][11];
string s[11];
queue< pair<int,int> > red,blue;

int main(){
    int holex,holey;
    scanf("%d %d",&n,&m);
    for(int i=0;i<n;i++){
        cin >> s[i];
    }
queue<int> count;
    count.push(0);
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(s[i][j] == 'O'){
                holey = i;
                holex = j;
            } else if(s[i][j] == 'R'){
                red.push(make_pair(i,j));
                check[i][j]=1;
            } else if(s[i][j] == 'B'){
                blue.push(make_pair(i,j));
            }
        }
    }
    bool ccc=false;
    while(!red.empty()){
        
        int ry=red.front().first, rx=red.front().second, bx=blue.front().second, by=blue.front().first, cnt=count.front();
        if(ry == holey && rx == holex) break;
        if(ccc == true) break;
        red.pop();
        blue.pop();
        count.pop();
  
        for(int i=0;i<4;i++){
            bool putable = true;
            int imsiy = by, imsix =bx, obsy= 0, obsx =0;
            
            while(true){
                imsiy += dy[i];
                imsix += dx[i];
                if(s[imsiy][imsix] == '#'){
                        blue.push(make_pair(imsiy - dy[i] + obsy, imsix - dx[i] + obsx));
                     break;
                }
                else if(imsiy == ry && imsix == rx){
                     obsy = dy[i] * (-1);
                     obsx = dx[i] * (-1);
                } else if(s[imsiy][imsix] == 'O'){
                    putable = false;
                    break;
                }
            }
            
            if(!putable) continue;
            
            imsiy = ry, imsix = rx, obsy= 0, obsx =0;
            while(true){
                imsiy += dy[i];
                imsix += dx[i];
                if(s[imsiy][imsix] == '#'){
                     if(1350000 < ++check[imsiy - dy[i] + obsy][imsix - dx[i] + obsx]) ccc=true;
                 //     check[imsiy - dy[i] + obsy][imsix - dx[i] + obsx] = true;
                        red.push(make_pair(imsiy - dy[i] + obsy, imsix - dx[i] + obsx));
                        count.push(cnt+1);
                  //    cout << "blue: " << imsiy - dy[i] + obsy << " " << imsix - dx[i] + obsx << " " << cnt+1 << '\n';
                  //    cout << "red: " << imsiy - dy[i] + obsy << " " << imsix - dx[i] + obsx << " " << cnt+1 << '\n';
                     
                     break;
                }
                else if(imsiy == by && imsix == bx){
                     obsy = dy[i] * (-1);
                     obsx = dx[i] * (-1);
                } else if(s[imsiy][imsix] == 'O'){
                         
                    red.push(make_pair(imsiy, imsix));
                    count.push(cnt+1);
                    break;
                }
            }
            
            
        }
    }
    if(red.empty() || ccc) cout << "-1";
    else cout << count.front();
}

#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
int arr[100001],n,cnt;
bool check[100001];
vector<int> tree;

void init(int node, int start, int end){
	if(start == end){
		tree[node] = check[end];
		return;
	}
	init(node*2, start, (start+end)/2);
	init(node*2+1, (start+end)/2+1, end);
	tree[node] = tree[node*2] + tree[node*2+1];
}

void update(int node, int start, int end, int left, int right, int idx){
	if(start > right || end < left) return;
	if(start > idx || end < idx) return;
	if(start == end){
		tree[node] = 1;
		return;
	}
	update(node*2, start, (start+end)/2, left, right, idx);
	update(node*2+1, (start+end)/2+1, end, left, right, idx);
	tree[node] = tree[node*2] + tree[node*2+1];
}

int query(int node, int start, int end, int left, int right){
	if(start > right || end < left) return 0;
	if(left <= start && end <= right) return tree[node];
	return query(node*2, start, (start+end)/2, left, right) + query(node*2+1, (start+end)/2+1, end, left, right);
}
int main() {
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n;
	for(int i=0;i<n;i++)
		cin >> arr[i];
	cnt = n-1;
	while(cnt > 0 && arr[cnt-1] < arr[cnt]){
		cnt--;
	}
	cout << cnt << '\n';
	for(int i=cnt;i<n;i++)
		check[arr[i]] = true;
	
	tree.resize(400044);
	init(1,1,n);
	for(int i=0;i<cnt;i++){
	//	cout << query(1, 1, n, 1, arr[i]-1) << "+" << cnt-i << '\n';
		cout << query(1, 1, n, 1, arr[i]-1) + cnt-i-1 << ' '; 
		update(1, 1, n, 1, n, arr[i]);
	}
}

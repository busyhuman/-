#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
int n,m,arr[100001];
vector<int> ans;
vector<pair<int,int>> tree;
void init(int node, int start, int end){
	if( start == end){
		tree[node].first = arr[end];
		tree[node].second = 0;
		return;
	}
	init( node*2, start, (start+end)/2);
	init( node*2+1,(start+end)/2+1, end);
	vector<int> imsi;
	imsi.push_back(tree[node*2].first);
	imsi.push_back(tree[node*2].second);
	imsi.push_back(tree[node*2+1].first);
	imsi.push_back(tree[node*2+1].second);
	sort(imsi.begin(), imsi.end() );
	tree[node].first = imsi[3];
	tree[node].second = imsi[2];
}

void update(int node, int start, int end, int idx, int su){
	if( start > idx || end < idx) return;
	if( start == end ){
		tree[node].first = su;
		tree[node].second = 0;
		return;
	}
	update( node*2, start, (start+end)/2, idx, su);
	update( node*2+1, (start+end)/2+1, end, idx, su);
	vector<int> imsi;
	imsi.push_back(tree[node*2].first);
	imsi.push_back(tree[node*2].second);
	imsi.push_back(tree[node*2+1].first);
	imsi.push_back(tree[node*2+1].second);
	sort(imsi.begin(), imsi.end() );
	tree[node].first = imsi[3];
	tree[node].second = imsi[2];
}

void query(int node, int start, int end, int left, int right){
	if(start > right || end < left) return;
	if(left <= start && end <= right){
		ans.push_back(tree[node].first);
		ans.push_back(tree[node].second);
		return;
	}
	query(node*2,start,(start+end)/2,left,right);
	query(node*2+1,(start+end)/2+1,end,left,right);
}
int main() {
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n;
	for(int i=1;i<=n;i++) cin >> arr[i];
	cin >> m;
	
	tree.resize(400004);
	init(1,1,n);
	while(m--){
		int a,b,c;
		cin >> a >> b >> c;
		if(a == 1) update(1,1,n,b,c);
		else{
			query(1,1,n,b,c);
			sort(ans.begin(), ans.end() );
			int len = ans.size();
			cout << ans[len-1] + ans[len-2] << '\n';
			ans.clear();
		}
	}
}

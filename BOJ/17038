#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
int n, m;
vector<int> arr2[100001], arr[100001];
bool color[100001];
bool visit[100001];
bool flag;
long long ans;
void dfs(int now, bool col){
	int len = arr[now].size(), len2 = arr2[now].size();
	for(int i=0;i<len;i++){
		int su = arr[now][i];
		if(visit[su] == false){
			visit[su] = true;
			color[su] = col;
			dfs(su, col);	
		}
		else if(visit[su] == true && color[su] != col){
			flag = true;
			return;
		}
	}
	
	len2 = arr2[now].size();
	for(int i=0;i<len2;i++){
		int su2 = arr2[now][i];
		
		if(visit[su2] == false){
			visit[su2] = true;
			color[su2] = !col;
			dfs(su2, !col);	
		}
		else if(visit[su2] == true && color[su2] != !col){
			flag = true;
			return;
		}
	}
}

int main() {
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
    cin >> n >> m;

	for(int i=0;i<m;i++){
		char z;
		int x, y;
		cin >> z >> x >> y;
		if(z == 'S') {
			arr[x].push_back(y);
			arr[y].push_back(x);
		}
		if(z == 'D') {
			arr2[x].push_back(y);
			arr2[y].push_back(x);
		}
	}
	
	for(int i=1;i<=n;i++){
		if(visit[i] == false){
			visit[i] = true;
			color[i] = true;
			dfs(i, true);
			if(flag) break;
			ans++;
		}
	}
	
	if(flag) {
		cout << "0";
		return 0;
	}
	cout << '1';
	for(int i=0;i<ans;i++)
		cout << '0';	
	
}

#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
int n;
int arr[100001];
vector<int> tree;

void init(int node, int left, int right){
	if(left == right) {
		tree[node] = left;
		return;
	}
	init(node*2, left, (left+right) / 2);
	init(node*2+1, (left+right)/2+1,right);
	
	if(arr[tree[node*2]] <= arr[tree[node*2+1]]) tree[node] = tree[node*2];
	else tree[node] = tree[node*2+1];
}

int query(int node, int start, int end, int left, int right){
	if(start > right || end < left) return -1;
	if(left <= start && end <= right) return tree[node];
	
	int im = query(node*2, start, (start+end) / 2, left, right);
	int im2 = query(node*2+1, (start+end)/2+1,end,left,right);
	
	if(im == -1) return im2;
	if(im2 == -1) return im;
	
	if(arr[im] <= arr[im2]) return im;
	else return im2;
}

int getAns(int l, int r){
	int mini = query(1, 0, n-1, l, r);
	int ans = (r-l+1)*arr[mini];
	
	if(l < mini) ans = max(ans,getAns(l, mini-1));	
	if(r > mini) ans = max(ans,getAns(mini+1, r));	
	
	return ans;
}

int main() {
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n;
    int tree_size = 1 << (int)(ceil(log2(n)) + 1);
	tree.resize(tree_size);
	for(int i=0;i<n;i++) cin >> arr[i];
	
	init(1, 0, n-1);
	cout << getAns(0, n-1);
}

#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
int n,m,arr[100001], ans, ans2;
vector<pair<int,int>> tree;
void init(int node, int start, int end){
	if( start == end){
		tree[node].first = arr[end];
		tree[node].second = end;
		return;
	}
	init( node*2, start, (start+end)/2);
	init( node*2+1,(start+end)/2+1, end);
	int t1 = tree[node*2].first, t2 = tree[node*2].second, t3 = tree[node*2+1].first, t4 = tree[node*2+1].second;
	if( t1 < t3){
		tree[node].first = t1;
		tree[node].second = t2;
	}
	else if( t1 > t3){
		tree[node].first = t3;
		tree[node].second = t4;
	}
	else{
		if(t2 < t4){
			tree[node].first = t1;
			tree[node].second = t2;
		}
		else{
			tree[node].first = t3;
			tree[node].second = t4;	
		}
	}
}

void update(int node, int start, int end, int idx, int su){
	if( start > idx || end < idx) return;
	if( start == end ){
		tree[node].first = su;
		tree[node].second = idx;
		return;
	}
	update( node*2, start, (start+end)/2, idx, su);
	update( node*2+1, (start+end)/2+1, end, idx, su);
	int t1 = tree[node*2].first, t2 = tree[node*2].second, t3 = tree[node*2+1].first, t4 = tree[node*2+1].second;
	if( t1 < t3){
		tree[node].first = t1;
		tree[node].second = t2;
	}
	else if( t1 > t3){
		tree[node].first = t3;
		tree[node].second = t4;
	}
	else{
		if(t2 < t4){
			tree[node].first = t1;
			tree[node].second = t2;
		}
		else{
			tree[node].first = t3;
			tree[node].second = t4;	
		}
	}
}
void query(int node, int start, int end, int left, int right){
	if( start > right || end < left) return;
	if( left <= start && end <= right ){
		int t1 = tree[node].first, t2 = tree[node].second;
		if( t1 < ans || (t1 == ans && t2 < ans2) ){
			ans = t1;
			ans2 = t2;
		}
		return;
	}
	query(node*2, start, (start+end)/2, left, right);
	query(node*2+1, (start+end)/2+1, end,left, right);
}
int main() {
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n;
	for(int i=1;i<=n;i++) cin >> arr[i];
	cin >> m;
	
	tree.resize(400004);
	init(1,1,n);
	while(m--){
		int a,b,c;
		cin >> a >> b >> c;
		if(a == 1) {
			update(1,1,n,b,c);
		}
		else{
			ans = inf;
			ans2 = 0;
			query(1,1,n,b,c);
			cout << ans2 << '\n';
		}
	}
}

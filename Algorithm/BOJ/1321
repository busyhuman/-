#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
int n, m, arr[500001];
vector<int> tree;

void init(int node, int start, int end){
	if(start == end){
		tree[node] = arr[end];
		return;
	}
	init(node*2, start, (start+end)/2);
	init(node*2+1, (start+end)/2 + 1, end);
	tree[node] = tree[node*2] + tree[node*2+1];
}

void update(int node, int start, int end, int idx, int val){
	if(start > idx || end < idx) return;
	if(start == end){
		tree[node] += val;
		return;
	}
	update(node*2, start, (start+end)/2, idx, val);
	update(node*2+1, (start+end)/2 + 1, end, idx, val);
	tree[node] = tree[node*2] + tree[node*2+1];
}

int query(int node, int start, int end, int val){
	if(tree[node] <= val) return end;
	if(tree[node*2] >= val) return query(node*2, start, (start+end)/2, val);
	else return query(node*2+1, (start+end)/2+1, end, val - tree[node*2]);
}

int main() {
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
    cin >> n;
	for(int i=1;i<=n;i++) cin >> arr[i];
	cin >> m;
	tree.resize( 4000001);
	init(1,1,n);
	while(m--){
		int q, x, y;
		cin >> q;
		if(q == 1){
			cin >> x >> y;
			update(1, 1, n, x, y);
		}
		else{
			cin >> x;
			cout << query(1, 1, n, x) << '\n';
		}
	}
}

#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
int n, m, arr[51][51],numOfTwo,numOfZero, mini = inf, dy[4] = { -1,0,1,0}, dx[4] = {0,1,0,-1};
vector<int> vy, vx;
int virusY[11], virusX[11];
void bfs(){
	queue<int> y,x,l;
	bool visit[51][51] = {false};
	for(int i=0;i<m;i++){
		visit[virusY[i]][virusX[i]] = true;
		y.push(virusY[i]);
		x.push(virusX[i]);
		l.push(0);
	}
	int wow = 0;

	while( !y.empty() ){ 
		int yf = y.front(), xf = x.front(), lf = l.front();
		y.pop(), x.pop(), l.pop();
//		cout << yf << ' ' << xf << ' ' << lf << ' ' << wow << ' ' << numOfZero << '\n';

		for(int i=0;i<4;i++){
			int imsiy = yf + dy[i], imsix = xf + dx[i];
			
			if(imsiy < 0 || imsiy >= n || imsix < 0 || imsix >= n) continue;
			if(visit[imsiy][imsix]) continue;
			if(arr[imsiy][imsix] == 1) continue;
			visit[imsiy][imsix] = true;
			if(arr[imsiy][imsix] == 0){
				y.push(imsiy);
				x.push(imsix);
				l.push(lf+1);
				wow++;
				if(wow == numOfZero){
					mini = min(mini, lf+1);
					return;	
				}

			} else if (arr[imsiy][imsix] == 2){
				y.push(imsiy);
				x.push(imsix);
				l.push(lf+1);
			}
		}
	}
}

void dfs(int now, int cnt){
		if(now == m){
		bfs();
		return;
	}
	if(cnt == numOfTwo) return;

//	cout << now << ' ' << cnt << ' ' << numOfTwo << '\n';
	virusY[now]= vy[cnt];
	virusX[now]= vx[cnt];
	dfs(now+1, cnt+1);
	virusY[now]= vy[cnt];
	virusX[now]= vx[cnt];
	dfs(now, cnt+1);
}

int main() {
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n >> m;

	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			cin >> arr[i][j];
			if(arr[i][j] == 2){
				vy.push_back(i);
				vx.push_back(j);
			}
			else if(arr[i][j] == 0){
				numOfZero++;	
			}
		}
	}

	if(numOfZero == 0) mini = 0;
	numOfTwo = vy.size();	
	dfs(0, 0);
	if(mini == inf) cout << "-1";
	else cout << mini;
}

#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
vector< pair<int, int > > arr;

int dfs(int left, int right){
	if( (right - left) <= 2){
		int closest = inf;
        
		for(int i=left;i<=right-1;i++)
			for(int j=i+1;j<=right;j++)
				closest = min(closest, (arr[i].second - arr[j].second) * (arr[i].second - arr[j].second) + (arr[i].first - arr[j].first) * (arr[i].first - arr[j].first) ); 
		
	//	cout << closest << '\n';
		return closest;
	}
	int mid = (left+right) / 2;
	int dist = min( dfs(left, mid), dfs( mid+1, right) );
	vector< pair<int, int> > tdist;
	
	for (int i=left;i<=right;i++)
		if( (arr[mid].first - arr[i].first) * (arr[mid].first - arr[i].first) < dist)
			tdist.push_back( make_pair(arr[i].second, arr[i].first) );
	
	int len = tdist.size();
	sort(tdist.begin(), tdist.end() );
	for(int i=0;i<len-1;i++){
		for(int j=i+1;j<len;j++){
			if( (tdist[j].first - tdist[i].first) * (tdist[j].first - tdist[i].first) >= dist ) break; 
			dist = min(dist, (tdist[i].second - tdist[j].second) * (tdist[i].second - tdist[j].second) + (tdist[i].first - tdist[j].first) * (tdist[i].first - tdist[j].first) );
		}
	}
	return dist;
}

int main() {
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int n;
    cin >> n;
	for(int i=0;i<n;i++){
		int x, y;
		cin >> x >> y;
		arr.push_back( make_pair(x,y) );
	}
	sort( arr.begin(), arr.end() );
	cout << dfs(0, n-1);
}

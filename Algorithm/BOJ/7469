#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
int n, arr[100001], m;
vector<int> tree[400004];

void init(int node, int left, int right){
	if(left == right) {
		tree[node].push_back(arr[left]);
		return;
	}
	int mid = (left+right) >> 1;
	init(node*2,left,mid);
	init(node*2+1,mid+1,right);
	int len1 = tree[node*2].size(), len2 = tree[node*2+1].size();
	for(int i=0;i<len1;i++) tree[node].push_back(tree[node*2][i]);
	for(int i=0;i<len2;i++) tree[node].push_back(tree[node*2+1][i]);
}

int query(int node, int start, int end, int left, int right, int k){
	if(start > right || end < left) return 0;
	if(left <= start && end <= right) return tree[node].end() - upper_bound(tree[node].begin(), tree[node].end(),k);
	int mid = (start+end) >> 1;
	return query(node*2,start,mid,left,right,k) + query(node*2+1,mid+1,end,left,right,k);
}

int main() {
	cin >> n >> m;
	for(int i=1;i<=n;i++) scanf("%d", arr+i);
	init(1,1,n);
	for(int i=0;i<400004;i++) sort(tree[i].begin(),tree[i].end());
	while(m--){
		int a, b, k, left = -inf, right = inf;
		scanf("%d %d %d", &a, &b,&k);
		while(left <= right){
			int mid = (left + right) / 2;
			int place = query(1,1,n,a,b,mid);
		//	cout << left << ' ' << mid << ' ' << right << ' ' << place << ' ' << '\n';
			if( b-a-place+1 < k) left = mid+1;
			else right = mid-1;
		}
		cout << left << '\n';
	}
}

#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
int n, k, painted[100001], ans;
long long dp[100001][4];
vector<int> arr[100001];

long long dfs(int now, int color, int pre, int precolor){
//	cout << now << ' ' << color << '\n';
	if(color == precolor || (painted[now] && painted[now] != color) ) return 0;
	if(dp[now][color]) return dp[now][color];
	dp[now][color] = 1;
	int len = arr[now].size();
	
	for(int i=0;i<len;i++){
		int su = arr[now][i];
		if(su == pre) continue;
		
		long long cnt=0;

		for(int j=1;j<=3;j++){
			cnt += dfs(su, j, now, color);
			cnt %= mod;
		}
		dp[now][color] *= cnt;
		dp[now][color] %= mod;

	}
	return dp[now][color];
}

int main() {
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n >> k;
	for(int i=1;i<n;i++){
		int x, y;
		cin >> x >> y;
		arr[x].push_back(y);
		arr[y].push_back(x);
	}
	for(int i=0;i<k;i++){
		int x, y;
		cin >> x >> y;
		painted[x] = y;
	}
	
	int start = 1;
	for(int i=1;i<=n;i++){
		if( painted[i] == 0){
			start=i;
			break;
		}
	}

	ans += dfs(start,1,0,0);
	ans += dfs(start,2,0,0);
	ans += dfs(start,3,0,0);
	cout << ans % mod;
}

#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
int n, b, snow[260], ans=inf;
bool visit[260][260];
vector< pair<int, int> > boots;

void dfs(int snowidx, int bootsidx){
//	cout << snowidx << ' ' << bootsidx << '\n';
	
	if( snowidx == n-1){
		ans = min(ans, bootsidx);
		return;
	}
	int maxDepth = boots[bootsidx].first, maxStep = boots[bootsidx].second;
	for(int i=snowidx+1;i<=snowidx+maxStep;i++){
		if(i >= n) break;
		if( visit[i][bootsidx] == false && snow[i] <= maxDepth){
			visit[i][bootsidx] = true;
			dfs(i,bootsidx);
		}
	}

	for(int i=bootsidx+1;i<b;i++){
		if( visit[snowidx][i] == false && snow[snowidx] <= boots[i].first){
			visit[snowidx][i] = true;
			dfs(snowidx,i);
		}
	}
	
}

int main() {
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n >> b;
	for(int i=0;i<n;i++)
		cin >> snow[i];
	for(int i=0;i<b;i++){
		int x, y;
		cin >> x >> y;
		boots.push_back( make_pair(x,y) );
	}
	dfs(0, 0);
	cout << ans;
}

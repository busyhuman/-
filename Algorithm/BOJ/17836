#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
int n, m, t, arr[101][101],dy[4]={-1,0,1,0}, dx[4]={0,1,0,-1};
bool visit[101][101][2];
int bfs(){
	queue<int> y, x, l;
	queue<bool> g;
	y.push(0);
	x.push(0);
	l.push(0);
	g.push(false);
	visit[0][0][0] = true;
	visit[0][0][1] = true;
	int ans = inf;
	
	while( !x.empty() ){
		int yf = y.front(), xf = x.front(), lf = l.front();
		bool gf = g.front();
		y.pop(), x.pop(), l.pop(), g.pop();
	//	cout << yf << ' ' << xf << ' ' << lf << ' ' << gf << '\n';
		if( yf == n-1 && xf == m-1 ) {
			ans = min(ans, lf);
			continue;
		}
		for(int i=0;i<4;i++){
			int imsiy = dy[i]+yf, imsix = dx[i]+xf;
			if( imsiy < 0 || imsiy >= n || imsix < 0 || imsix >= m) continue;
			if( visit[imsiy][imsix][gf] ) continue;
			
			if( arr[imsiy][imsix] == 0 || (arr[imsiy][imsix] == 1 && gf) ){
				visit[imsiy][imsix][gf] = true;
				y.push(imsiy);
				x.push(imsix);
				l.push(lf+1);
				g.push(gf);
			}
			else if( arr[imsiy][imsix] == 2 ){
				visit[imsiy][imsix][0] = true;
				visit[imsiy][imsix][1] = true;
				y.push(imsiy);
				x.push(imsix);
				l.push(lf+1);
				g.push(true);
			}
		}
	}
	
	return ans;
}
int main() {
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n >> m >> t;
	for(int i=0;i<n;i++)
		for(int j=0;j<m;j++)
			cin >> arr[i][j];
	
	int ans = bfs();
	if( ans == inf || ans > t) cout << "Fail";
	else cout << ans;
}

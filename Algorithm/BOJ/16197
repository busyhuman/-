#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
string arr[21];
bool visit[21][21][21][21];
int dy[4] = {-1,0,1,0}, dx[4] = {0,1,0,-1},n,m;
int main() {
	cin >> n >> m;
	for(int i=0;i<n;i++) cin >> arr[i];
	
	int wow=0;
	queue<int> cy1,cx1,cy2,cx2,l;
	
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(arr[i][j] == 'o'){
				if(!wow){
					wow++;
					cy1.push(i);
					cx1.push(j);
				}else{
					cy2.push(i);
					cx2.push(j);
				}
			}
		}
	}
	visit[cy1.front()][cx1.front()][cy2.front()][cx2.front()] = true;
	l.push(0);
	bool ispossible=false;
	int mini = -1;
	
	while( !cy1.empty() || !cy2.empty() ){
		int fcy1 = cy1.front(), fcx1 = cx1.front(), fcy2 = cy2.front(), fcx2 = cx2.front(), fl=l.front();
		cy1.pop(), cx1.pop(), cy2.pop(), cx2.pop(), l.pop();
//		cout << "f : " << fcy1 << " " << fcx1 << " " << fcy2 << " " << fcx2 << "\n";
		if(ispossible) break;
		
		for(int i=0;i<4;i++){
			int imsiy1 = fcy1+dy[i], imsix1 = fcx1+dx[i], imsiy2 = fcy2+dy[i], imsix2 = fcx2+dx[i];
			int out1 = 0, out2 = 0;
			
			if(imsiy1 < 0 || imsiy1 >= n || imsix1 < 0 || imsix1 >= m) out1 = 1;
			if(imsiy2 < 0 || imsiy2 >= n || imsix2 < 0 || imsix2 >= m) out2 = 1;
	//		cout << "imsi : " << imsiy1 << " " << imsix1 << " " << imsiy2 << " " << imsix2 << '\n';
			if(out1+out2 == 1){
				ispossible = true;
				mini = fl+1;
				break;
			} else if(out1+out2 > 0)
				continue;
			
			if(arr[imsiy1][imsix1] == '.' && arr[imsiy2][imsix2] == '#' && !visit[imsiy1][imsix1][imsiy2][imsix2]){
				visit[imsiy1][imsix1][imsiy2][imsix2] = true;
				cy1.push(imsiy1);
				cx1.push(imsix1);
				cy2.push(fcy2);
				cx2.push(fcx2);
				l.push(fl+1);
			}
			
			if(arr[imsiy1][imsix1] == '#' && arr[imsiy2][imsix2] == '.' && !visit[imsiy1][imsix1][imsiy2][imsix2]){
				visit[imsiy1][imsix1][imsiy2][imsix2] = true;
				cy1.push(fcy1);
				cx1.push(fcx1);
				cy2.push(imsiy2);
				cx2.push(imsix2);
				l.push(fl+1);
			}
			if(arr[imsiy1][imsix1] == '.' && arr[imsiy2][imsix2] == '.' && !visit[imsiy1][imsix1][imsiy2][imsix2]){
				visit[imsiy1][imsix1][imsiy2][imsix2] = true;
				cy1.push(imsiy1);
				cx1.push(imsix1);
				cy2.push(imsiy2);
				cx2.push(imsix2);
				l.push(fl+1);
			}
			
			if(arr[imsiy1][imsix1] == '.' && arr[imsiy2][imsix2] == 'o' && !visit[imsiy1][imsix1][imsiy2][imsix2]){
				visit[imsiy1][imsix1][imsiy2][imsix2] = true;
				cy1.push(imsiy1);
				cx1.push(imsix1);
				cy2.push(imsiy2);
				cx2.push(imsix2);
				l.push(fl+1);
			}
			
			if(arr[imsiy1][imsix1] == 'o' && arr[imsiy2][imsix2] == '.' && !visit[imsiy1][imsix1][imsiy2][imsix2]){
				visit[imsiy1][imsix1][imsiy2][imsix2] = true;
				cy1.push(imsiy1);
				cx1.push(imsix1);
				cy2.push(imsiy2);
				cx2.push(imsix2);
				l.push(fl+1);
			}
		}
			
	}
	if(ispossible && mini <= 10) cout << mini;
	else cout << "-1";
}

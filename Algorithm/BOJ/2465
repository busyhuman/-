#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
int n, arr[100002];
vector<int> tree, qq, ans;

void init(int node, int start, int end){
	if(start == end){
		tree[node] = 1;
		return;
	}
	init( node*2, start, (start+end)/2);
	init( node*2+1, (start+end)/2+1,end);
	tree[node] = tree[node*2] + tree[node*2+1];
}

void update(int node, int start, int end, int idx){
	if(start > idx || end < idx) return;
	if( start == end){
		tree[node] = 0;
		return;
	}
	update( node*2, start, (start+end)/2, idx);
	update( node*2+1, (start+end)/2+1,end, idx);
	tree[node] = tree[node*2] + tree[node*2+1];
}

int query(int node, int left, int right, int su){
	if(left == right) return left;
	if( tree[node*2] >= su) return query(node*2, left, (left+right)/2, su);
	else return query(node*2+1, (left + right)/2+1, right, su-tree[node*2] );
}

int main() {
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n;
	for(int i=0;i<n;i++) cin >> arr[i];
	sort(arr, arr+n);
	for(int i=0;i<n;i++){
		int su;
		cin >> su;
		qq.push_back(su);
	}
	tree.resize(400004);
	init(1,0,n-1);
	
	for(int i=n-1;i>=0;i--){
		int su = query(1,0,n-1,qq[i]+1);
		ans.push_back(arr[su]);
		update(1,0,n-1,su);
	}
	for(int i=n-1;i>=0;i--)
		cout << ans[i] << '\n';
}

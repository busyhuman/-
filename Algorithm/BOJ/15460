#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
int n;
long long arr[100001], dp[100001];
double ans[100001];
vector<long long> tree;

void init(int node, int start, int end){
	if(start == end) {
		tree[node] = arr[end];
		return;
	}
	init(node*2, start, (start+end)/2);
	init(node*2+1, (start+end)/2+1, end);
	tree[node] = min(tree[node*2], tree[node*2+1]);
}

long long query(int node, int start, int end, int left, int right){
	if(start > right || end < left) return inf;
	if(left <= start && end <= right) return tree[node];
	return min(query(node*2, start, (start+end)/2, left, right), query(node*2+1, (start+end)/2+1, end, left, right) );
}

int main() {
    // 구간 합 + 세그먼트 트리
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
    cin >> n;
	for(int i=0;i<n;i++) cin >> arr[i];
	dp[0] = arr[0];
	for(int i=1;i<n;i++) dp[i] = dp[i-1] + arr[i];
	tree.resize(400004);
	init(1, 0, n-1);
    
	for(int i=1;i<=n-2;i++)
		ans[i] = (double)( dp[n-1] - dp[i-1] - query(1,0,n-1, i, n-1) ) / (n-i-1);
	
	double maxi = -1;
	for(int i=0;i<n;i++)
		if(ans[i] > maxi)
			maxi = ans[i];
	
	for(int i=0;i<n;i++)
		if(ans[i] == maxi) cout << i << '\n';
}

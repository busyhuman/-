#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
int n,arr[51], p[51];
bool primetime[2004];
vector<int> v[51];
bool visit[51];
vector<int> ans;
int dfs(int now, int except) {
	if(visit[now]) return 0;
	visit[now] = true;
//	cout << now << '\n';
	int len = v[now].size();
	
	for(int i=0;i<len;i++){
		int su = v[now][i];
		if(su == except || su == 0) continue;

		if(p[su] == -1 || (visit[ p[su] ] == false && dfs( p[su], except) ) ){
			p[su] = now;

			return 1;
		}
	}
	return 0;
}

int main(){
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n;
	for(int i=0;i<n;i++) cin >> arr[i];
	int sqrtlen = sqrt(2001);
	primetime[0] = primetime[1] = true;
	for(int i=2;i<=sqrtlen;i++){
		if(primetime[i] == false){
			for(int j=i+i;j<=2001;j+=i){
				primetime[j] = true;
			}
		}
	}

	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			if( i == j) continue;
			
			if( primetime[ arr[i] + arr[j] ] == false ){
				v[i].push_back(j);	
			}
		}
	}

	int len = v[0].size();
	
	for(int i=0;i<len;i++){

		memset(p, -1, sizeof(p) );
		int cnt = 2;
		for(int j=1;j<n;j++){
			if(j==v[0][i]) continue;
			memset(visit, false, sizeof(visit) );
			visit[0]=true;
			visit[v[0][i]]=true;
			cnt += dfs(j, v[0][i]);
		}
		if(cnt == n) ans.push_back(arr[v[0][i]]);
	}
	
	sort( ans.begin(), ans.end() );
	
	int anslen = ans.size();
	
	if(anslen == 0) cout << "-1";
	else{
		for(int i=0;i<anslen;i++)
			cout << ans[i] << ' ';
	}
	
}

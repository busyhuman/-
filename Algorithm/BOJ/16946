#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
int n, m,dy[4] = {-1,0,1,0}, dx[4] = {0,1,0,-1};
string arr[1001];
int check[1001][1001], area[1001][1001];
bool visit[1001][1001];
int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n >> m;
	for(int i=0;i<n;i++) cin >> arr[i];
	int areacnt = 0;
	
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
		//	cout << i << " " << j << '\n';
			if(arr[i][j] == '0' && visit[i][j] == false){

				vector<int> yy, xx;
				queue<int> y,x;
				y.push(i);
				x.push(j);
				visit[i][j] = true;
				yy.push_back(i);
				xx.push_back(j);
				int cnt = 1;
				areacnt++;
				while(!x.empty()){
					int yf = y.front(), xf = x.front();
					y.pop(), x.pop();
	
			//		cout << yf << " " << xf << " " << '\n';
					for(int k=0;k<4;k++){
						int imsiy = yf + dy[k], imsix = xf + dx[k];
					//	cout << dy[i] << " " << dx[i] << '\n';
						if(imsiy < 0 || imsiy >= n || imsix < 0 || imsix >= m) continue; 
						
						if(arr[imsiy][imsix] == '0' && visit[imsiy][imsix] == false){
							visit[imsiy][imsix] = true;
							y.push(imsiy);
							x.push(imsix);
							cnt++;
							yy.push_back(imsiy);
							xx.push_back(imsix);
						}
					}	// for
					


				}	// while
				int len = yy.size();
					for(int k=0;k<len;k++){
						check[yy[k]][xx[k]] = cnt;
						area[yy[k]][xx[k]] = areacnt;
				}
			}	// if
		}
	}
	/*
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			cout << check[i][j] << ' ';
		}
		cout << '\n';
	}
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			cout << area[i][j] << ' ';
		}
		cout << '\n';
	}
	*/
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(arr[i][j] == '0') cout << "0";
			else if(arr[i][j] == '1'){
				int imsi = 1;
				map<int, bool> mp;
				for(int k=0;k<4;k++){
					int imsiy = i + dy[k], imsix = j + dx[k];
					if(imsiy < 0 || imsiy >= n || imsix < 0 || imsix >= m) continue;
					if(mp[area[imsiy][imsix]] == false){
						mp[area[imsiy][imsix]] = true;
						imsi += check[imsiy][imsix];
						imsi %= 10;
					}
				}
				cout << imsi % 10;
			}
		}
		cout << '\n';
	}
}

#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
int n, m;
vector<int> tree;
vector< pair<int,int> > arr;
void update(int node, int start, int end, int index){
	if(start > index || end < index) return;
	if(start == end){
		tree[node] += 1;
		return;
	}
	update(node*2, start, (start+end)/2, index);
	update(node*2+1, (start+end)/2+1, end, index);
	tree[node] = tree[node*2] + tree[node*2+1];
}

int query(int node, int start, int end, int left, int right){
	if(start > right || end < left) return 0;
	if(left <= start && end <= right) return tree[node];
	return query(node*2, start, (start+end)/2, left, right) + query(node*2+1, (start+end)/2 + 1, end, left, right);
}

int main() {
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n >> m;
	for(int i=0;i<m;i++){
		int x,y;
		cin >> x >> y;
		arr.push_back( make_pair(x,y) );
	}
	sort( arr.begin(), arr.end() );
	
	int tree_size = 1 << (int(ceil(log2(m))) + 1);
	tree.resize(tree_size);
	long long ans = 0;
	for(int i=0;i<m;i++){
		ans += query(1,1,n,arr[i].second+1,n);
		update(1,1,n,arr[i].second);
	}
	cout << ans;
}

#include <iostream>
#include <string>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <vector>
#include <deque>
#include <bitset>
#include <set>
#include <map>
using namespace std;
#define inf 2000000000
#define mod 1000000007
int arr[51][51],arr2[51][3];
int eat[51],n;
bool visit[51];
int dfs(int su){
	if(visit[su]) return 0;
	visit[su]=true;
	for(int i=1;i<=n;i++){
		int imsi = arr[su][i];
		if(!imsi) continue;
		if( !eat[i] || dfs(eat[i]) ){
			eat[i] = su;
			return 1;
		}
	}
	return 0;
}

int main() {
    ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> n;
	for(int i=1;i<=n;i++){
		cin >> arr2[i][0] >> arr2[i][1] >> arr2[i][2];
	}

	for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
			if(i == j) continue;
			if( arr2[i][0] == arr2[j][0] && arr2[i][1] == arr2[j][1] && arr2[i][2] == arr2[j][2]){
				if(i < j)
				arr[i][j] = 1;
			}
			else if( arr2[i][0] >= arr2[j][0] && arr2[i][1] >= arr2[j][1] && arr2[i][2] >= arr2[j][2] )
				arr[i][j] = 1;
		}
	}

	int cnt = 0;
	for(int i=1;i<=n;i++){
		int imsi=2;
		
		while(imsi--){
			memset(visit,false,sizeof(visit));
			cnt += dfs(i);
	//		for(int k=1;k<=n;k++) cout << eat[k] << ' ';
	//			cout << '\n';
		}
	}
	cout << n-cnt;
}
